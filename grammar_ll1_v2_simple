fichier -> with Ada.Text_IO; use Ada.Text_IO; procedure ident is decl_star begin instr_plus end ident_opt ; EOF

decl -> type ident decl2
decl -> ident_plus_comma : type init ;
decl -> procedure ident params_opt is decl_star begin instr_plus end ident_opt ;
decl -> function ident params_opt return type is decl_star begin instr_plus end ident_opt ;

decl2 -> ;
decl2 -> is decl3

decl3 -> access ident ;
decl3 -> record champs_plus end record ;

init -> := expr
init -> ''

decl_star -> decl decl_star
decl_star -> ''

champs -> ident_plus_comma : type ;

champs_plus -> champs champs_plus2

champs_plus2 -> champs champs_plus2
champs_plus2 -> ''

type_r -> ident
type_r -> access ident

params -> ( param_plus_semicolon ) ;

params_opt -> params
params_opt -> ''

param -> ident_plus_comma : mode_opt type_r

param_plus_semicolon -> param param_plus_semicolon2

param_plus_semicolon2 -> ; param param_plus_semicolon2
param_plus_semicolon2 -> ''

mode -> in mode2

mode2 -> out
mode2 -> ''

mode_opt -> mode
mode_opt -> ''

expr -> or_expr

or_expr -> and_expr or_expr_tail

or_expr_tail -> or or_expr_tail2
or_expr_tail -> ''

or_expr_tail2 -> else and_expr or_expr_tail
or_expr_tail2 -> and_expr or_expr_tail

and_expr -> equality_expr and_expr_tail

and_expr_tail -> and and_expr_tail2
and_expr_tail -> ''

and_expr_tail2 -> then equality_expr and_expr_tail
and_expr_tail2 -> not_expr and_expr_tail

not_expr -> equality_expr not_expr_tail

not_expr_tail -> not equality_expr not_expr_tail
not_expr_tail -> ''

equality_expr -> relational_expr equality_expr_tail

equality_expr_tail -> = relational_expr equality_expr_tail
equality_expr_tail -> /= relational_expr equality_expr_tail
equality_expr_tail -> ''

relational_expr -> additive_expr relational_expr_tail

relational_expr_tail -> < additive_expr relational_expr_tail
relational_expr_tail -> <= additive_expr relational_expr_tail
relational_expr_tail -> > additive_expr relational_expr_tail
relational_expr_tail -> >= additive_expr relational_expr_tail
relational_expr_tail -> ''

additive_expr -> multiplicative_expr additive_expr_tail

additive_expr_tail -> + multiplicative_expr additive_expr_tail
additive_expr_tail -> - multiplicative_expr additive_expr_tail
additive_expr_tail -> ''

multiplicative_expr -> unary_expr multiplicative_expr_tail

multiplicative_expr_tail -> * unary_expr multiplicative_expr_tail
multiplicative_expr_tail -> / unary_expr multiplicative_expr_tail
multiplicative_expr_tail -> rem unary_expr multiplicative_expr_tail
multiplicative_expr_tail -> ''

unary_expr -> - unary_expr
unary_expr -> primary_expr

primary_expr -> entier
primary_expr -> caractere
primary_expr -> true
primary_expr -> false
primary_expr -> null
primary_expr -> ( expr )
primary_expr -> not
primary_expr -> new ident
primary_expr -> ident primary_expr2
primary_expr -> character ' val ( expr )

primary_expr2 -> access2
primary_expr2 -> ( expr_plus_comma ) primary_expr3

primary_expr3 -> . ident access2
primary_expr3 -> ''

access2 -> . ident access2
access2 -> ''

expr_plus_comma -> expr expr_plus_comma2

expr_plus_comma2 -> , expr expr_plus_comma2
expr_plus_comma2 -> ''

expr_opt -> expr
expr_opt -> ''

instr -> access := expr ;
instr -> ident instr2
instr -> return expr_opt ;
instr -> begin instr_plus end ;
instr -> if expr then instr_plus else_if_star else_instr_opt end if ;
instr -> for ident in reverse_instr expr .. expr loop instr_plus end loop ;
instr -> while expr loop instr_plus end loop ;

instr2 -> ;
instr2 -> ( expr_plus_comma ) ;

instr_plus -> instr instr_plus2

instr_plus2 -> instr instr_plus2
instr_plus2 -> ''

else_if -> elsif expr then instr_plus

else_if_star -> else_if else_if_star
else_if_star -> ''

else_instr -> else instr_plus

else_instr_opt -> else_instr
else_instr_opt -> ''

reverse_instr -> reverse
reverse_instr -> ''
ident_opt -> ident
ident_opt -> ''

ident_plus_comma -> ident ident_plus_comma2 ;

ident_plus_comma2 -> , ident ident_plus_comma2
ident_plus_comma2 -> ''